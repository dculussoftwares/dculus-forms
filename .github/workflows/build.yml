name: Build Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8.15.0'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comprehensive scanning

      - name: Run TruffleHog secret scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --exclude-detectors="mongodb" --fail --no-verification

      - name: Security scan results
        if: always()
        run: |
          echo "✅ TruffleHog security scan completed"
          echo "Note: MongoDB connection strings are excluded as they are development credentials"

  build-shared-packages:
    name: Build Shared Packages
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm db:generate

      - name: Build shared packages
        run: |
          pnpm --filter @dculus/types build
          pnpm --filter @dculus/utils build
          pnpm --filter @dculus/ui build

      - name: Cache built packages
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            packages/utils/dist
            packages/ui/dist
            node_modules/.pnpm
          key: built-packages-${{ github.sha }}

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: build-shared-packages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore built packages cache
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            packages/utils/dist
            packages/ui/dist
            node_modules/.pnpm
          key: built-packages-${{ github.sha }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint backend
        run: pnpm --filter backend lint || echo "Lint issues found but continuing build"
        continue-on-error: true

      - name: Type check backend
        run: pnpm --filter backend type-check

      - name: Build backend
        run: pnpm --filter backend build

  build-form-app:
    name: Build Form App
    runs-on: ubuntu-latest
    needs: build-shared-packages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore built packages cache
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            packages/utils/dist
            packages/ui/dist
            node_modules/.pnpm
          key: built-packages-${{ github.sha }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint form-app
        run: pnpm --filter form-app lint || echo "Lint issues found but continuing build"
        continue-on-error: true

      - name: Type check form-app
        run: pnpm --filter form-app type-check

      - name: Build form-app
        run: pnpm --filter form-app build

  build-form-viewer:
    name: Build Form Viewer
    runs-on: ubuntu-latest
    needs: build-shared-packages
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore built packages cache
        uses: actions/cache@v4
        with:
          path: |
            packages/types/dist
            packages/utils/dist
            packages/ui/dist
            node_modules/.pnpm
          key: built-packages-${{ github.sha }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint form-viewer
        run: pnpm --filter form-viewer lint || echo "Lint issues found but continuing build"
        continue-on-error: true

      - name: Type check form-viewer
        run: pnpm --filter form-viewer type-check

      - name: Build form-viewer
        run: pnpm --filter form-viewer build

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-backend, build-form-app, build-form-viewer]
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "Build Summary:"
          echo "Backend: ${{ needs.build-backend.result }}"
          echo "Form App: ${{ needs.build-form-app.result }}"
          echo "Form Viewer: ${{ needs.build-form-viewer.result }}"
          
          if [[ "${{ needs.build-backend.result }}" == "success" && 
                "${{ needs.build-form-app.result }}" == "success" && 
                "${{ needs.build-form-viewer.result }}" == "success" ]]; then
            echo "✅ All builds successful!"
          else
            echo "❌ Some builds failed"
            exit 1
          fi