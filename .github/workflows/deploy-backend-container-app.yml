name: Deploy Backend Container App

on:
  push:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'packages/**'
      - 'infrastructure/backend-container-app/**'
      - '.github/workflows/deploy-backend-container-app.yml'
      - 'pnpm-workspace.yaml'
      - 'package.json'
      - 'pnpm-lock.yaml'
  pull_request:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'packages/**'
      - 'infrastructure/backend-container-app/**'
      - '.github/workflows/deploy-backend-container-app.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      deploy_image:
        description: 'Deploy container image after infrastructure'
        type: boolean
        default: true

env:
  # Azure Configuration
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true
  
  # Environment Variables
  TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
  
  # Container Registry Configuration
  REGISTRY_NAME: dculusbackendcr
  IMAGE_NAME: dculus-backend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  terraform:
    name: 'Backend Infrastructure Deployment'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    
    defaults:
      run:
        shell: bash
        working-directory: infrastructure/backend-container-app
    
    outputs:
      container_registry_login_server: ${{ steps.terraform-outputs.outputs.container_registry_login_server }}
      container_registry_name: ${{ steps.terraform-outputs.outputs.container_registry_name }}
      backend_fqdn: ${{ steps.terraform-outputs.outputs.backend_fqdn }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform backend resources
        id: backend
        run: |
          RESOURCE_GROUP_NAME=dculus-global-terraform-assets-resource-grp
          STORAGE_ACCOUNT_NAME=dculusterraformstates
          CONTAINER_NAME=backend-container-app-deployment

          echo "Setting up Terraform backend resources..."
          
          # Create resource group if it doesn't exist
          az group create --name $RESOURCE_GROUP_NAME --location eastus
          
          # Create storage account if it doesn't exist
          az storage account create \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob \
            --allow-blob-public-access false \
            --only-show-errors || echo "Storage account already exists"
          
          # Create blob container if it doesn't exist
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --only-show-errors || echo "Container already exists"
          
          # Get storage account key for Terraform backend
          ACCOUNT_KEY=$(az storage account keys list \
            --resource-group $RESOURCE_GROUP_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --query '[0].value' -o tsv)
          echo "ARM_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
          
          echo "✅ Terraform backend resources ready"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="resource_group_name=dculus-global-terraform-assets-resource-grp" \
            -backend-config="storage_account_name=dculusterraformstates" \
            -backend-config="container_name=backend-container-app-deployment" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan \
            -var="environment=$TF_VAR_environment" \
            -var="cloudflare_r2_access_key=${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}" \
            -var="cloudflare_r2_secret_key=${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}" \
            -var="cloudflare_r2_endpoint=${{ vars.CLOUDFLARE_R2_ENDPOINT }}" \
            -var="cloudflare_r2_private_bucket_name=${{ vars.CLOUDFLARE_R2_PRIVATE_BUCKET_NAME }}" \
            -var="cloudflare_r2_public_bucket_name=${{ vars.CLOUDFLARE_R2_PUBLIC_BUCKET_NAME }}" \
            -var="common_tags={Project=\"Dculus Forms\",Environment=\"$TF_VAR_environment\",ManagedBy=\"Terraform\",Owner=\"Dculus Industries\",Repository=\"dculus-forms\",Component=\"Backend\"}"

      - name: Terraform Apply
        id: apply
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: |
          terraform apply -auto-approve tfplan
          echo "✅ Backend infrastructure deployed successfully"

      - name: Terraform Destroy
        id: destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: |
          terraform plan -destroy -out=destroy-plan \
            -var="environment=$TF_VAR_environment" \
            -var="cloudflare_r2_access_key=${{ secrets.CLOUDFLARE_R2_ACCESS_KEY }}" \
            -var="cloudflare_r2_secret_key=${{ secrets.CLOUDFLARE_R2_SECRET_KEY }}" \
            -var="cloudflare_r2_endpoint=${{ vars.CLOUDFLARE_R2_ENDPOINT }}" \
            -var="cloudflare_r2_private_bucket_name=${{ vars.CLOUDFLARE_R2_PRIVATE_BUCKET_NAME }}" \
            -var="cloudflare_r2_public_bucket_name=${{ vars.CLOUDFLARE_R2_PUBLIC_BUCKET_NAME }}" \
            -var="common_tags={Project=\"Dculus Forms\",Environment=\"$TF_VAR_environment\",ManagedBy=\"Terraform\",Owner=\"Dculus Industries\",Repository=\"dculus-forms\",Component=\"Backend\"}"
          terraform apply -auto-approve destroy-plan
          echo "🗑️ Backend infrastructure destroyed"

      - name: Get Terraform Outputs
        id: terraform-outputs
        if: steps.apply.outcome == 'success'
        run: |
          echo "container_registry_login_server=$(terraform output -raw container_registry_login_server)" >> $GITHUB_OUTPUT
          echo "container_registry_name=$(terraform output -raw container_registry_name)" >> $GITHUB_OUTPUT
          echo "backend_fqdn=$(terraform output -raw backend_fqdn)" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: 'Build and Deploy Container Image'
    needs: terraform
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.terraform.result == 'success' &&
      (
        (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
        (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply' && (github.event.inputs.deploy_image == 'true' || github.event.inputs.deploy_image == true))
      )
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: |
          pnpm --filter @dculus/types build
          pnpm --filter @dculus/utils build

      - name: Build backend
        run: pnpm --filter backend build

      - name: Log in to Azure Container Registry
        run: |
          az acr login --name ${{ needs.terraform.outputs.container_registry_name }}

      - name: Build and push Docker image
        run: |
          FULL_IMAGE_NAME="${{ needs.terraform.outputs.container_registry_login_server }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          LATEST_IMAGE_NAME="${{ needs.terraform.outputs.container_registry_login_server }}/${{ env.IMAGE_NAME }}:latest"
          
          echo "Building image: $FULL_IMAGE_NAME"
          
          # Build the Docker image
          docker build -f apps/backend/Dockerfile -t $FULL_IMAGE_NAME -t $LATEST_IMAGE_NAME .
          
          # Push both tags
          docker push $FULL_IMAGE_NAME
          docker push $LATEST_IMAGE_NAME
          
          echo "✅ Image pushed successfully"

      - name: Update Container App with new image
        run: |
          CONTAINER_APP_NAME="dculus-backend"
          RESOURCE_GROUP_NAME="dculus-backend-rg"
          FULL_IMAGE_NAME="${{ needs.terraform.outputs.container_registry_login_server }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          
          echo "Updating Container App with image: $FULL_IMAGE_NAME"
          
          # Update the container app with the new image
          az containerapp update \
            --name $CONTAINER_APP_NAME \
            --resource-group $RESOURCE_GROUP_NAME \
            --image $FULL_IMAGE_NAME
          
          echo "✅ Container App updated successfully"

      - name: Wait for deployment and test health endpoint
        run: |
          BACKEND_URL="https://${{ needs.terraform.outputs.backend_fqdn }}"
          HEALTH_URL="$BACKEND_URL/health"
          
          echo "Waiting for deployment to be ready..."
          sleep 60
          
          echo "Testing health endpoint: $HEALTH_URL"
          
          # Wait for health endpoint to be ready (up to 5 minutes)
          for i in {1..10}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✅ Health endpoint is responding"
              break
            else
              echo "⏳ Health endpoint not ready, attempt $i/10"
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "❌ Health endpoint failed to respond after 5 minutes"
              exit 1
            fi
          done
          
          echo "🚀 Backend deployed successfully at: $BACKEND_URL"
          echo "📊 GraphQL endpoint: $BACKEND_URL/graphql"
          echo "💚 Health endpoint: $HEALTH_URL"

  output-summary:
    name: 'Output Deployment Summary'
    needs: [terraform, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Backend Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.terraform.result }}" == "success" ]]; then
            echo "### ✅ Infrastructure Status: Success" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Component | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Backend URL | https://${{ needs.terraform.outputs.backend_fqdn }} |" >> $GITHUB_STEP_SUMMARY
            echo "| GraphQL Endpoint | https://${{ needs.terraform.outputs.backend_fqdn }}/graphql |" >> $GITHUB_STEP_SUMMARY
            echo "| Health Endpoint | https://${{ needs.terraform.outputs.backend_fqdn }}/health |" >> $GITHUB_STEP_SUMMARY
            echo "| Container Registry | ${{ needs.terraform.outputs.container_registry_login_server }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Infrastructure Status: Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build-and-deploy.result }}" == "success" ]]; then
            echo "### ✅ Container Deployment Status: Success" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Image | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Image Tag | ${{ env.IMAGE_TAG }} |" >> $GITHUB_STEP_SUMMARY
            echo "| Image Name | ${{ env.IMAGE_NAME }} |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.terraform.result }}" == "success" ]]; then
            echo "### ⏭️ Container Deployment Status: Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Infrastructure was deployed but container image deployment was skipped." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### 🔐 Security Features" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Managed Identity for Container App" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Secrets stored in Azure Key Vault" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Private connection to MongoDB" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container Registry with authentication" >> $GITHUB_STEP_SUMMARY