name: Deploy Azure Cosmos DB for MongoDB

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/cosmos-db-mongodb/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'infrastructure/cosmos-db-mongodb/**'

permissions:
  id-token: write
  contents: read

jobs:
  deploy-cosmos-db:
    name: Deploy Cosmos DB MongoDB
    runs-on: ubuntu-latest
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true

    defaults:
      run:
        shell: bash
        working-directory: infrastructure/cosmos-db-mongodb

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform backend resources
        id: backend
        run: |
          RESOURCE_GROUP_NAME=dculus-global-terraform-assets-resource-grp
          STORAGE_ACCOUNT_NAME=dculusterraformstates
          CONTAINER_NAME=cosmos-db-mongodb-deployment

          # Create resource group if it doesn't exist
          az group create --name $RESOURCE_GROUP_NAME --location eastus

          # Create storage account if it doesn't exist
          az storage account create \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob \
            --allow-blob-public-access false

          # Create blob container if it doesn't exist
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT_NAME

          # Get storage account key for Terraform backend
          ACCOUNT_KEY=$(az storage account keys list \
            --resource-group $RESOURCE_GROUP_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --query '[0].value' -o tsv)
          echo "ARM_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Comment PR with plan results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## ðŸš€ Cosmos DB MongoDB Terraform Plan Results
            
            **Terraform Initialization**: \`${{ steps.init.outcome }}\`
            **Terraform Validation**: \`${{ steps.validate.outcome }}\`
            **Terraform Plan**: \`${{ steps.plan.outcome }}\`
            
            ### Plan Output
            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            
            ### Errors
            \`\`\`
            ${{ steps.plan.outputs.stderr }}
            \`\`\`
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        id: outputs
        run: |
          echo "cosmosdb_account_name=$(terraform output -raw cosmosdb_account_name)" >> $GITHUB_OUTPUT
          echo "database_name=$(terraform output -raw database_name)" >> $GITHUB_OUTPUT
          echo "resource_group_name=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
          echo "cosmosdb_endpoint=$(terraform output -raw cosmosdb_endpoint)" >> $GITHUB_OUTPUT

      - name: Generate deployment summary
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          echo "## ðŸŽ‰ Cosmos DB MongoDB Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cosmos DB Account**: \`${{ steps.outputs.outputs.cosmosdb_account_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Database Name**: \`${{ steps.outputs.outputs.database_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group**: \`${{ steps.outputs.outputs.resource_group_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Endpoint**: \`${{ steps.outputs.outputs.cosmosdb_endpoint }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Collections Created:" >> $GITHUB_STEP_SUMMARY
          echo "- forms" >> $GITHUB_STEP_SUMMARY
          echo "- responses" >> $GITHUB_STEP_SUMMARY
          echo "- templates" >> $GITHUB_STEP_SUMMARY
          echo "- organizations" >> $GITHUB_STEP_SUMMARY
          echo "- users" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Update your application's DATABASE_URL environment variable" >> $GITHUB_STEP_SUMMARY
          echo "2. The connection string is available in the Terraform outputs (sensitive)" >> $GITHUB_STEP_SUMMARY
          echo "3. Test your MongoDB connection from your application" >> $GITHUB_STEP_SUMMARY

      - name: Create deployment artifact
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        run: |
          mkdir -p deployment-info
          cat > deployment-info/cosmos-db-info.md << EOF
          # Azure Cosmos DB for MongoDB Deployment Information
          
          ## Connection Details
          - **Account Name**: ${{ steps.outputs.outputs.cosmosdb_account_name }}
          - **Database Name**: ${{ steps.outputs.outputs.database_name }}
          - **Resource Group**: ${{ steps.outputs.outputs.resource_group_name }}
          - **Endpoint**: ${{ steps.outputs.outputs.cosmosdb_endpoint }}
          
          ## Collections
          - forms
          - responses  
          - templates
          - organizations
          - users
          
          ## Configuration
          - **Tier**: Free tier (400 RU/s shared throughput)
          - **API**: MongoDB
          - **Region**: East US
          - **MongoDB Version**: 4.2
          
          ## Usage Notes
          1. Use the DATABASE_URL from Terraform outputs in your application
          2. Connection string format: mongodb://[username]:[password]@[host]:10255/[database]?ssl=true
          3. Free tier limitations: Single region, 5GB storage, 400 RU/s shared
          
          Deployment completed on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF

      - name: Upload deployment artifacts
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: cosmos-db-deployment-info
          path: infrastructure/cosmos-db-mongodb/deployment-info/
          retention-days: 90