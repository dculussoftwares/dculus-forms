name: Deploy MongoDB Infrastructure

on:
  workflow_dispatch:
    inputs:
      mongodb_admin_password:
        description: 'MongoDB admin password (leave empty to use secret)'
        required: false
        type: string
      resource_group_name:
        description: 'Resource group name'
        required: false
        default: 'dculus-mongodb-backend'
        type: string
      location:
        description: 'Azure region'
        required: false
        default: 'East US'
        type: choice
        options:
          - 'East US'
          - 'West US 2'
          - 'Central US'
          - 'North Europe'
          - 'West Europe'

permissions:
  id-token: write
  contents: read

env:
  # Azure Configuration
  ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  ARM_USE_OIDC: true

jobs:
  deploy-mongodb:
    name: Deploy MongoDB Infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform backend resources
        id: backend
        run: |
          RESOURCE_GROUP_NAME=dculus-global-terraform-assets-resource-grp
          STORAGE_ACCOUNT_NAME=dculusterraformstates
          CONTAINER_NAME=backend-resource-deployment

          echo "Setting up Terraform backend resources..."
          
          # Create resource group if it doesn't exist
          az group create --name $RESOURCE_GROUP_NAME --location eastus
          
          # Create storage account if it doesn't exist
          az storage account create \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob \
            --allow-blob-public-access false \
            --only-show-errors || echo "Storage account already exists"
          
          # Create blob container if it doesn't exist
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --only-show-errors || echo "Container already exists"
          
          # Get storage account key for Terraform backend
          ACCOUNT_KEY=$(az storage account keys list \
            --resource-group $RESOURCE_GROUP_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --query '[0].value' -o tsv)
          echo "ARM_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
          
          echo "✅ Terraform backend resources ready"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.0"

      - name: Terraform Init
        working-directory: ./terraform/azure/backend-resources
        run: terraform init

      - name: Terraform Format Check
        working-directory: ./terraform/azure/backend-resources
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform/azure/backend-resources
        env:
          TF_VAR_mongodb_admin_password: ${{ github.event.inputs.mongodb_admin_password || secrets.MONGODB_ADMIN_PASSWORD }}
          TF_VAR_resource_group_name: ${{ github.event.inputs.resource_group_name }}
          TF_VAR_location: ${{ github.event.inputs.location }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform/azure/backend-resources
        env:
          TF_VAR_mongodb_admin_password: ${{ github.event.inputs.mongodb_admin_password || secrets.MONGODB_ADMIN_PASSWORD }}
          TF_VAR_resource_group_name: ${{ github.event.inputs.resource_group_name }}
          TF_VAR_location: ${{ github.event.inputs.location }}
        run: terraform apply -auto-approve tfplan

      - name: Output MongoDB Information
        working-directory: ./terraform/azure/backend-resources
        run: |
          echo "## 🗄️ MongoDB Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group**: $(terraform output -raw resource_group_name)" >> $GITHUB_STEP_SUMMARY
          echo "**Location**: $(terraform output -raw location)" >> $GITHUB_STEP_SUMMARY
          echo "**Container App**: $(terraform output -raw mongodb_container_app_name)" >> $GITHUB_STEP_SUMMARY
          echo "**Internal Endpoint**: $(terraform output -raw mongodb_internal_endpoint)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ MongoDB is ready and accessible within the Container App environment" >> $GITHUB_STEP_SUMMARY

      - name: Output Connection Details (Secure)
        working-directory: ./terraform/azure/backend-resources
        run: |
          echo "::notice title=MongoDB Deployed::MongoDB is now available at internal endpoint: $(terraform output -raw mongodb_internal_endpoint)"
          echo "::notice title=Resource Group::Created in resource group: $(terraform output -raw resource_group_name)"