name: Deploy MongoDB Container App Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'infrastructure/mongodb-container-app/**'
      - '.github/workflows/deploy-mongodb-infrastructure.yml'
  pull_request:
    branches: [main]
    paths:
      - 'infrastructure/mongodb-container-app/**'
      - '.github/workflows/deploy-mongodb-infrastructure.yml'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    name: 'MongoDB Infrastructure Deployment'
    runs-on: ubuntu-latest
    
    env:
      ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true
      TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}

    defaults:
      run:
        shell: bash
        working-directory: infrastructure/mongodb-container-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform backend resources
        id: backend
        run: |
          RESOURCE_GROUP_NAME=dculus-global-terraform-assets-resource-grp
          STORAGE_ACCOUNT_NAME=dculusterraformstates
          CONTAINER_NAME=mongodb-container-app-deployment

          echo "Setting up Terraform backend resources..."
          
          # Create resource group if it doesn't exist
          az group create --name $RESOURCE_GROUP_NAME --location eastus

          # Create storage account if it doesn't exist
          az storage account create \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob \
            --allow-blob-public-access false \
            --only-show-errors || echo "Storage account already exists"

          # Create blob container if it doesn't exist
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --only-show-errors || echo "Container already exists"

          # Get storage account key for Terraform backend
          ACCOUNT_KEY=$(az storage account keys list \
            --resource-group $RESOURCE_GROUP_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --query '[0].value' -o tsv)
          echo "ARM_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
          
          echo "✅ Terraform backend resources ready"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.0

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="access_key=$ARM_ACCESS_KEY"

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -out=tfplan \
            -var="environment=$TF_VAR_environment" \
            -var="common_tags={Project=\"Dculus Forms\",Environment=\"$TF_VAR_environment\",ManagedBy=\"Terraform\",Owner=\"Dculus Industries\",Repository=\"dculus-forms\"}"

      - name: Terraform Apply
        id: apply
        if: |
          (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
          (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
        run: |
          terraform apply -auto-approve tfplan
          echo "✅ MongoDB infrastructure deployed successfully"

      - name: Terraform Destroy
        id: destroy
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
        run: |
          terraform plan -destroy -out=destroy-plan \
            -var="environment=$TF_VAR_environment" \
            -var="common_tags={Project=\"Dculus Forms\",Environment=\"$TF_VAR_environment\",ManagedBy=\"Terraform\",Owner=\"Dculus Industries\",Repository=\"dculus-forms\"}"
          terraform apply -auto-approve destroy-plan
          echo "🗑️ MongoDB infrastructure destroyed"

      - name: Output Results
        if: steps.apply.outcome == 'success' || github.event_name == 'pull_request'
        run: |
          if [ "${{ steps.apply.outcome }}" == "success" ]; then
            echo "### 📊 Deployment Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Output | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Resource Group | $(terraform output -raw resource_group_name) |" >> $GITHUB_STEP_SUMMARY
            echo "| MongoDB FQDN | $(terraform output -raw mongodb_fqdn) |" >> $GITHUB_STEP_SUMMARY
            echo "| Key Vault | $(terraform output -raw key_vault_name) |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔐 MongoDB credentials are stored in Azure Key Vault" >> $GITHUB_STEP_SUMMARY
          else
            echo "### � Terraform Plan" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Plan completed successfully. Review changes above." >> $GITHUB_STEP_SUMMARY
          fi
