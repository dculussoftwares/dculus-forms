name: Build and Push Backend to Docker Hub

on:
  push:
    branches: 
      - main
    paths:
      - 'apps/backend/**'
      - 'packages/**'
      - 'pnpm-lock.yaml'
      - '.github/workflows/docker-publish.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'apps/backend/**'
      - 'packages/**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag (default: latest)'
        required: false
        default: 'latest'
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: dculus/forms-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for default branch
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            # custom tag from workflow_dispatch
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
          labels: |
            org.opencontainers.image.title=Dculus Forms Backend
            org.opencontainers.image.description=Express.js + GraphQL backend for Dculus Forms with MongoDB and collaborative editing
            org.opencontainers.image.vendor=Dculus Industries
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1


      - name: Generate deployment artifacts
        if: github.event_name != 'pull_request'
        run: |
          mkdir -p deployment-artifacts
          
          # Create docker-compose.production.yml
          cat > deployment-artifacts/docker-compose.production.yml << EOF
          version: '3.8'
          
          services:
            backend:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              ports:
                - "4000:4000"
              environment:
                - DATABASE_URL=\${DATABASE_URL}
                - JWT_SECRET=\${JWT_SECRET}
                - BETTER_AUTH_SECRET=\${BETTER_AUTH_SECRET}
                - BETTER_AUTH_URL=\${BETTER_AUTH_URL:-http://localhost:4000}
                - NODE_ENV=\${NODE_ENV:-production}
                - PORT=\${PORT:-4000}
                - BASE_URL=\${BASE_URL:-http://localhost:4000}
                - CLOUDFLARE_R2_ACCESS_KEY=\${CLOUDFLARE_R2_ACCESS_KEY}
                - CLOUDFLARE_R2_SECRET_KEY=\${CLOUDFLARE_R2_SECRET_KEY}
                - CLOUDFLARE_R2_ENDPOINT=\${CLOUDFLARE_R2_ENDPOINT}
                - CLOUDFLARE_R2_PRIVATE_BUCKET_NAME=\${CLOUDFLARE_R2_PRIVATE_BUCKET_NAME}
                - CLOUDFLARE_R2_PUBLIC_BUCKET_NAME=\${CLOUDFLARE_R2_PUBLIC_BUCKET_NAME}
              restart: unless-stopped
              healthcheck:
                test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => { process.exit(1) })"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          EOF
          
          # Create deployment instructions
          cat > deployment-artifacts/DEPLOYMENT.md << EOF
          # Docker Hub Deployment Instructions
          
          ## Image Information
          - **Repository**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          - **Tag**: \`latest\` (from branch: ${{ github.ref_name }})
          - **Built from commit**: ${{ github.sha }}
          - **Build date**: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          ## Quick Start
          
          \`\`\`bash
          # Pull the latest image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          
          # Run with required environment variables
          docker run -d \\
            --name dculus-backend \\
            -p 4000:4000 \\
            -e DATABASE_URL="your-mongodb-url" \\
            -e JWT_SECRET="your-jwt-secret-32-chars-minimum" \\
            -e BETTER_AUTH_SECRET="your-auth-secret-32-chars-minimum" \\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          \`\`\`
          
          ## Using Docker Compose
          
          Use the provided \`docker-compose.production.yml\` file with a \`.env\` file containing your environment variables.
          
          \`\`\`bash
          docker-compose -f docker-compose.production.yml up -d
          \`\`\`
          
          ## Health Check
          
          \`\`\`bash
          curl http://localhost:4000/health
          \`\`\`
          
          Expected response: \`{"status": "ok", "timestamp": "..."}\`
          EOF

      - name: Upload deployment artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts
          path: deployment-artifacts/
          retention-days: 90

      - name: Comment on PR with image info
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `
            ## 🐳 Docker Build Summary
            
            **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`
            **Status**: ✅ Build successful (not pushed to registry)
            **Platforms**: linux/amd64, linux/arm64
            **Context**: Pull Request #${{ github.event.number }}
            
            The Docker image builds successfully but was not pushed to Docker Hub since this is a pull request.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      - name: Summary
        if: github.event_name != 'pull_request'
        run: |
          echo "## 🚀 Docker Hub Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "**Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
          echo "**Size**: $(docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest --format 'table {{.Size}}' | tail -1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quick Deploy Commands:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -d -p 4000:4000 --name dculus-backend \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e DATABASE_URL='your-db-url' \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e JWT_SECRET='your-jwt-secret' \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e BETTER_AUTH_SECRET='your-auth-secret' \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY