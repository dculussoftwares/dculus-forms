name: Deploy MongoDB Container App

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      container_cpu:
        description: 'Container CPU allocation (0.25, 0.5, 0.75, 1.0)'
        required: false
        default: '0.5'
        type: string
      container_memory:
        description: 'Container memory allocation (0.5Gi, 1.0Gi, 2.0Gi)'
        required: false
        default: '1.0Gi'
        type: string
      storage_size_gb:
        description: 'Persistent storage size in GB'
        required: false
        default: '10'
        type: string
      location:
        description: 'Azure region'
        required: false
        default: 'East US'
        type: string

env:
  TF_VERSION: '1.5.0'

jobs:
  deploy-mongodb-container-app:
    name: Deploy MongoDB Container App
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    env:
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_USE_OIDC: true

    defaults:
      run:
        shell: bash
        working-directory: infrastructure/mongodb-container-app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure CLI login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform backend resources
        id: backend
        run: |
          RESOURCE_GROUP_NAME=dculus-global-terraform-assets-resource-grp
          STORAGE_ACCOUNT_NAME=dculusterraformstates
          CONTAINER_NAME=mongodb-container-app-deployment

          echo "Setting up Terraform backend resources..."
          
          # Create resource group if it doesn't exist
          az group create --name $RESOURCE_GROUP_NAME --location eastus

          # Create storage account if it doesn't exist
          az storage account create \
            --resource-group $RESOURCE_GROUP_NAME \
            --name $STORAGE_ACCOUNT_NAME \
            --sku Standard_LRS \
            --encryption-services blob \
            --allow-blob-public-access false \
            --only-show-errors || echo "Storage account already exists"

          # Create blob container if it doesn't exist
          az storage container create \
            --name $CONTAINER_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --only-show-errors || echo "Container already exists"

          # Get storage account key for Terraform backend
          ACCOUNT_KEY=$(az storage account keys list \
            --resource-group $RESOURCE_GROUP_NAME \
            --account-name $STORAGE_ACCOUNT_NAME \
            --query '[0].value' -o tsv)
          echo "ARM_ACCESS_KEY=$ACCOUNT_KEY" >> $GITHUB_ENV
          
          echo "✅ Terraform backend resources ready"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive .
        continue-on-error: true

      - name: Terraform Init
        run: |
          echo "Initializing Terraform..."
          terraform init \
            -backend-config="resource_group_name=dculus-global-terraform-assets-resource-grp" \
            -backend-config="storage_account_name=dculusterraformstates" \
            -backend-config="container_name=mongodb-container-app-deployment" \
            -backend-config="key=terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          echo "Planning Terraform deployment..."
          terraform plan \
            -var="container_cpu=${{ github.event.inputs.container_cpu || '0.5' }}" \
            -var="container_memory=${{ github.event.inputs.container_memory || '1.0Gi' }}" \
            -var="storage_size_gb=${{ github.event.inputs.storage_size_gb || '10' }}" \
            -var="location=${{ github.event.inputs.location || 'East US' }}" \
            -var="environment=production" \
            -out=tfplan

      - name: Terraform Plan Output
        run: terraform show tfplan

      - name: Terraform Apply
        if: github.event.inputs.action == 'apply'
        run: |
          echo "Applying Terraform plan..."
          terraform apply -auto-approve tfplan

      - name: Terraform Destroy
        if: github.event.inputs.action == 'destroy'
        run: |
          echo "Destroying Terraform resources..."
          terraform destroy -auto-approve \
            -var="container_cpu=${{ github.event.inputs.container_cpu || '0.5' }}" \
            -var="container_memory=${{ github.event.inputs.container_memory || '1.0Gi' }}" \
            -var="storage_size_gb=${{ github.event.inputs.storage_size_gb || '10' }}" \
            -var="location=${{ github.event.inputs.location || 'East US' }}" \
            -var="environment=production"

      - name: Get Outputs (Apply only)
        if: github.event.inputs.action == 'apply'
        id: outputs
        run: |
          echo "Retrieving Terraform outputs..."
          MONGODB_FQDN=$(terraform output -raw mongodb_fqdn)
          CONTAINER_APP_NAME=$(terraform output -raw container_app_name)
          MONGODB_URL=$(terraform output -raw mongodb_url)
          
          echo "mongodb_fqdn=$MONGODB_FQDN" >> $GITHUB_OUTPUT
          echo "container_app_name=$CONTAINER_APP_NAME" >> $GITHUB_OUTPUT
          echo "mongodb_url=$MONGODB_URL" >> $GITHUB_OUTPUT
          
          echo "## 🚀 MongoDB Container App Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**MongoDB FQDN:** $MONGODB_FQDN" >> $GITHUB_STEP_SUMMARY
          echo "**Container App:** $CONTAINER_APP_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Access URL:** $MONGODB_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Connection Details:" >> $GITHUB_STEP_SUMMARY
          echo "**MongoDB will be accessible at:** $MONGODB_FQDN:27017" >> $GITHUB_STEP_SUMMARY
          echo "**Username:** admin" >> $GITHUB_STEP_SUMMARY
          echo "**Database:** dculus_forms" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Configuration:" >> $GITHUB_STEP_SUMMARY
          echo "- **CPU:** ${{ github.event.inputs.container_cpu || '0.5' }} cores" >> $GITHUB_STEP_SUMMARY
          echo "- **Memory:** ${{ github.event.inputs.container_memory || '1.0Gi' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Storage:** ${{ github.event.inputs.storage_size_gb || '10' }}GB persistent" >> $GITHUB_STEP_SUMMARY

      - name: Test MongoDB Connection (Apply only)
        if: github.event.inputs.action == 'apply'
        run: |
          MONGODB_FQDN=$(terraform output -raw mongodb_fqdn)
          echo "Waiting for MongoDB Container App to start..."
          
          # Wait up to 5 minutes for container to be ready
          for i in {1..10}; do
            echo "Attempt $i/10: Testing MongoDB container availability..."
            
            # Test HTTPS endpoint (Container Apps expose HTTPS by default)
            if curl -s --connect-timeout 10 "https://$MONGODB_FQDN" > /dev/null 2>&1; then
              echo "✅ MongoDB Container App is accessible!"
              echo "Container is running and ready for connections"
              break
            else
              echo "MongoDB container still starting... waiting 30 seconds"
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "⚠️ MongoDB container startup verification timed out"
              echo "The container may still be initializing"
              echo "Check Azure Portal for container status and logs"
            fi
          done

      - name: Security and Cost Information
        if: github.event.inputs.action == 'apply'
        run: |
          echo "## 💰 Cost Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Estimated Monthly Costs:" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Apps**: ~$5-15/month (based on CPU/memory allocation)" >> $GITHUB_STEP_SUMMARY
          echo "- **Storage**: ~$1-3/month (${{ github.event.inputs.storage_size_gb || '10' }}GB Azure Files)" >> $GITHUB_STEP_SUMMARY
          echo "- **Log Analytics**: ~$1-5/month (depends on log volume)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total**: ~$7-23/month (much cheaper than VM!)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔒 Security Notes" >> $GITHUB_STEP_SUMMARY
          echo "- **Change default passwords** before production use" >> $GITHUB_STEP_SUMMARY
          echo "- **Container Apps provide HTTPS endpoints** by default" >> $GITHUB_STEP_SUMMARY
          echo "- **Consider adding authentication** for additional security" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitor via Azure Log Analytics** for operational insights" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Ready to Use!" >> $GITHUB_STEP_SUMMARY
          echo "Your MongoDB is now running in Azure Container Apps with persistent storage!" >> $GITHUB_STEP_SUMMARY

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: deploy-mongodb-container-app
    if: always()
    steps:
      - name: Deployment Status
        run: |
          if [ "${{ needs.deploy-mongodb-container-app.result }}" == "success" ]; then
            echo "✅ MongoDB Container App deployment completed successfully"
          else
            echo "❌ MongoDB Container App deployment failed"
            exit 1
          fi