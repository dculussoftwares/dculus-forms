// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Better Auth Models

model User {
  id            String   @id @map("_id")
  name          String
  email         String   @unique
  emailVerified Boolean?
  image         String?
  role          String?  @default("user")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  accounts    Account[]
  sessions    Session[]
  members     Member[]
  invitations Invitation[] @relation("InvitedBy")
  forms       Form[]
  formPermissions FormPermission[]
  grantedPermissions FormPermission[] @relation("GrantedPermissions")
  responseEdits ResponseEditHistory[]

  @@map("user")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id                   String   @id @map("_id")
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Organization {
  id        String   @id @map("_id")
  name      String
  slug      String   @unique
  logo      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  members      Member[]
  invitations  Invitation[]
  forms        Form[]
  subscription Subscription?

  metadata String?

  @@map("organization")
}

model Member {
  id             String   @id @map("_id")
  organizationId String
  userId         String
  role           String   @default("member")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("member")
}

model Invitation {
  id             String   @id @map("_id")
  organizationId String
  email          String
  role           String   @default("member")
  status         String   @default("pending")
  inviterId      String
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation("InvitedBy", fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}


// Application Models

model Form {
  id               String   @id @map("_id")
  title            String
  description      String?
  shortUrl         String   @unique
  formSchema       Json
  settings         Json?
  isPublished      Boolean  @default(false)
  organizationId   String
  createdById      String
  sharingScope     String   @default("PRIVATE") // PRIVATE, SPECIFIC_MEMBERS, ALL_ORG_MEMBERS
  defaultPermission String  @default("VIEWER")  // Default permission for ALL_ORG_MEMBERS scope
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy    User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  responses              Response[]
  files                  FormFile[]
  analytics              FormViewAnalytics[]
  submissionAnalytics    FormSubmissionAnalytics[]
  permissions            FormPermission[]
  plugins                FormPlugin[]

  @@map("form")
}

model Response {
  id          String   @id @map("_id")
  formId      String
  data        Json
  metadata    Json?    // Generic plugin metadata storage
  submittedAt DateTime @default(now())

  form                       Form                        @relation(fields: [formId], references: [id], onDelete: Cascade)
  formSubmissionAnalytics    FormSubmissionAnalytics?
  editHistory                ResponseEditHistory[]

  @@map("response")
}

model FormTemplate {
  id         String   @id @map("_id")
  name       String
  description String?
  category   String?
  formSchema Json
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("form_template")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// Hocuspocus Collaborative Document Model
model CollaborativeDocument {
  id           String   @id @map("_id")
  documentName String   @unique
  state        Bytes
  updatedAt    DateTime @updatedAt

  @@map("collaborative_document")
}

// Form Metadata Cache Model
model FormMetadata {
  id                 String   @id @map("_id")
  formId             String   @unique
  pageCount          Int      @default(0)
  fieldCount         Int      @default(0)
  backgroundImageKey String?
  lastUpdated        DateTime @updatedAt

  @@map("form_metadata")
}

// Form Files Model
model FormFile {
  id           String   @id @map("_id")
  key          String   @unique
  type         String
  formId       String
  originalName String
  url          String
  size         Int
  mimeType     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_file")
}

// Form View Analytics Model
model FormViewAnalytics {
  id              String   @id @map("_id")
  formId          String
  sessionId       String   // Anonymous UUID session identifier
  userAgent       String
  operatingSystem String?  // Parsed OS (Windows, macOS, Linux, etc.)
  browser         String?  // Parsed browser (Chrome, Firefox, Safari, etc.)
  browserVersion  String?  // Browser version
  countryCode     String?  // ISO 3166-1 alpha-3 (e.g., "USA", "CAN", "GBR")
  regionCode      String?  // State/province code
  city            String?  // City if available
  timezone        String?  // IANA timezone (e.g., "America/New_York")
  language        String?  // Browser locale (e.g., "en-US", "fr-CA")
  viewedAt        DateTime @default(now())
  startedAt       DateTime? // When user first interacted with form (for completion time calculation)

  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([viewedAt])
  @@index([sessionId])
  @@map("form_view_analytics")
}

model FormSubmissionAnalytics {
  id                    String   @id @map("_id")
  formId                String
  responseId            String   @unique // Reference to the Response record (one-to-one)
  sessionId             String   // Anonymous UUID session identifier (same as view analytics)
  userAgent             String
  operatingSystem       String?  // Parsed OS (Windows, macOS, Linux, etc.)
  browser               String?  // Parsed browser (Chrome, Firefox, Safari, etc.)
  browserVersion        String?  // Browser version
  countryCode           String?  // ISO 3166-1 alpha-3 (e.g., "USA", "CAN", "GBR")
  regionCode            String?  // State/province code
  city                  String?  // City if available
  timezone              String?  // IANA timezone (e.g., "America/New_York")
  language              String?  // Browser locale (e.g., "en-US", "fr-CA")
  submittedAt           DateTime @default(now())
  completionTimeSeconds Int?     // Time taken to complete form in seconds

  form     Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  response Response @relation(fields: [responseId], references: [id], onDelete: Cascade)

  @@index([formId])
  @@index([submittedAt])
  @@index([sessionId])
  @@index([completionTimeSeconds])
  @@map("form_submission_analytics")
}

// Form Permission Model for sharing and access control
model FormPermission {
  id          String   @id @map("_id")
  formId      String   // Reference to Form
  userId      String   // Reference to User (organization member)
  permission  String   // OWNER, EDITOR, VIEWER, NO_ACCESS
  grantedById String   // Who granted this permission
  grantedAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  form      Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  grantedBy User @relation("GrantedPermissions", fields: [grantedById], references: [id])

  @@unique([formId, userId])
  @@index([formId])
  @@index([userId])
  @@map("form_permission")
}

// Response Edit Tracking Models

model ResponseEditHistory {
  id               String   @id @map("_id")
  responseId       String   // Reference to Response
  editedById       String   // User who made the edit
  editedAt         DateTime @default(now())
  editType         String   @default("MANUAL") // MANUAL, SYSTEM, BULK
  editReason       String?  // Optional reason for the edit
  ipAddress        String?  // IP address of the editor
  userAgent        String?  // User agent of the editor
  totalChanges     Int      @default(0) // Number of fields changed
  changesSummary   String?  // Human-readable summary of changes

  // Relations
  response         Response               @relation(fields: [responseId], references: [id], onDelete: Cascade)
  editedBy         User                   @relation(fields: [editedById], references: [id])
  fieldChanges     ResponseFieldChange[]

  @@index([responseId])
  @@index([editedById])
  @@index([editedAt])
  @@map("response_edit_history")
}

model ResponseFieldChange {
  id                    String   @id @map("_id")
  editHistoryId         String   // Reference to ResponseEditHistory
  fieldId               String   // Form field ID that was changed
  fieldLabel            String   // Human-readable field label at time of edit
  fieldType             String   // Field type (text, email, select, etc.)
  previousValue         Json?    // Previous field value (null for new fields)
  newValue              Json?    // New field value (null for deleted fields)
  changeType            String   // ADD, UPDATE, DELETE
  valueChangeSize       Int?     // Size of change (characters added/removed for text)

  // Relations
  editHistory          ResponseEditHistory @relation(fields: [editHistoryId], references: [id], onDelete: Cascade)

  @@index([editHistoryId])
  @@index([fieldId])
  @@index([changeType])
  @@map("response_field_change")
}

// Plugin System Models

model FormPlugin {
  id        String   @id @map("_id")
  formId    String   // Reference to Form
  type      String   // Plugin type: "webhook", "email", "slack", etc.
  name      String   // User-friendly name
  enabled   Boolean  @default(true)
  config    Json     // Plugin-specific configuration (flexible JSON)
  events    String[] // Events that trigger this plugin: ["form.submitted", "plugin.test"]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  form       Form             @relation(fields: [formId], references: [id], onDelete: Cascade)
  deliveries PluginDelivery[]

  @@index([formId])
  @@index([type])
  @@index([enabled])
  @@map("form_plugin")
}

model PluginDelivery {
  id           String   @id @map("_id")
  pluginId     String   // Reference to FormPlugin
  eventType    String   // "form.submitted", "plugin.test", etc.
  status       String   // "success", "failed"
  payload      Json     // Event data sent to plugin
  response     Json?    // Response from plugin (if applicable)
  errorMessage String?  // Error details if failed
  deliveredAt  DateTime @default(now())

  // Relations
  plugin FormPlugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@index([pluginId])
  @@index([eventType])
  @@index([status])
  @@index([deliveredAt])
  @@map("plugin_delivery")
}

// Subscription Management Models

model Subscription {
  id                      String   @id @map("_id")
  organizationId          String   @unique
  chargebeeCustomerId     String   // Chargebee customer ID
  chargebeeSubscriptionId String?  // Chargebee subscription ID (null for free plan)

  // Plan information
  planId                  String   // 'free', 'starter', 'advanced'
  status                  String   // 'active', 'cancelled', 'expired', 'past_due'

  // Usage tracking (local cache for performance)
  viewsUsed               Int      @default(0)
  submissionsUsed         Int      @default(0)
  viewsLimit              Int?     // null = unlimited
  submissionsLimit        Int?     // null = unlimited

  // Billing period (resets usage counters)
  currentPeriodStart      DateTime
  currentPeriodEnd        DateTime

  // Metadata
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  // Indexes
  @@index([status])
  @@index([planId])
  @@map("subscription")
}
