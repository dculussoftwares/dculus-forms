// This is yomodel User {
  id            String    @id @map("_id")
 model Session {
  id                    String    @id @map("_id")
  expiresAt             DateTime
  token                 String    @unique
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  ipAddress             String?
  userAgent             String?
  userId                String
  activeOrganizationId  String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}String
  email         String    @unique
  emailVerified Boolean?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  members       Member[]
  invitations   Invitation[] @relation("InvitedBy")
  forms         Form[]

  @@map("user")
}ile,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Better Auth Core Models
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  members       Member[]
  invitations   Invitation[] @relation("InvitedBy")
  forms         Form[]

  @@map("user")
}

model Account {
  id                String  @id @map("_id")
  accountId         String
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String   @db.ObjectId
  activeOrganizationId String?  @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

// Better Auth Organization Plugin Models
model Organization {
  id          String   @id @map("_id")
  name        String
  slug        String   @unique
  logo        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     Member[]
  invitations Invitation[]
  forms       Form[]

  @@map("organization")
}

model Member {
  id             String   @id @map("_id")
  organizationId String
  userId         String
  role           String   @default("member") // owner, admin, member
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@map("member")
}

model Invitation {
  id             String   @id @map("_id")
  organizationId String
  email          String
  role           String   @default("member")
  status         String   @default("pending") // pending, accepted, expired
  expiresAt      DateTime
  inviterId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation("InvitedBy", fields: [inviterId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@map("invitation")
}

// Application Models
model Form {
  id             String   @id @map("_id")
  title          String
  description    String?
  fields         Json
  isPublished    Boolean  @default(false)
  organizationId String
  createdById    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy    User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  responses    Response[]

  @@map("form")
}

model Response {
  id          String   @id @map("_id")
  formId      String
  data        Json
  submittedAt DateTime @default(now())
  
  form Form @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("response")
}
